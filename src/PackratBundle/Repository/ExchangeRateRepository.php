<?php

namespace PackratBundle\Repository;

use GuzzleHttp\Client;
use Packrat\ExchangeRate\ExchangeRateRetriever;
use Money\Currency;

/**
 * ExchangeRateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExchangeRateRepository extends \Doctrine\ORM\EntityRepository
{
    public function add(Currency $currency)
    {
        $em = $this->getEntityManager();

        $exchangeRate = new \PackratBundle\Entity\ExchangeRate();
        $exchangeRate->setCurrency($currency);

        $em->persist($exchangeRate);
        $em->flush();

        $this->refresh($currency);
    }

    public function addAll()
    {
        $exchangeRate = new ExchangeRateRetriever(new Client());
        $currencies = $exchangeRate->getAllCurrencies();

        foreach ($currencies as $currency) {
            $this->add($currency['id']);
        }
    }

    public function refresh(Currency $currency)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'UPDATE PackratBundle:ExchangeRate er
                SET er.toEur = :exchangeRate,
                    er.lastUpdated = :now
                WHERE er.currency = :currency'
            )->setParameters([
                'exchangeRate' => $this->getExchangeRateFor($currency),
                'currency'     => $currency,
                'now'          => (new \DateTime())->format('Y-m-d H:i:s'),
            ]);

        $query->execute();
    }

    public function refreshAll(array $currencies)
    {
        foreach ($currencies as $currency) {
            $this->refresh($currency);
        }
    }

    private function getExchangeRateFor(Currency $currency)
    {
        $exchangeRate = new ExchangeRateRetriever(new Client());

        return $exchangeRate->getFor($currency);
    }
}
